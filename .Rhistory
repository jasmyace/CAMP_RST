}
}
print(cat(paste0(i,' \n')))
}
}
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes[[1]]@data$Grid_ID[i]))
walk[i,3] <- shapes[[1]]@data$pre_Town_ID[i]
walk[i,4] <- substr(shapes[[1]]@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
#walk2 <- walk[walk$Grid_Excel_ID != walk$Grid_ID,]
# sequentially number the towns...for better or for worse.
within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
dim(test)
dim(data)
head(data)
head(walk)
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes[[1]]@data$Grid_ID[i]))
walk[i,3] <- shapes[[1]]@data$Town_ID[i]
walk[i,4] <- substr(shapes[[1]]@data$Grid_ID[i],1,2)
}
head(walk)
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
#walk2 <- walk[walk$Grid_Excel_ID != walk$Grid_ID,]
# sequentially number the towns...for better or for worse.
within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
dim(shapes[[1]]@data$State)
table(shapes[[1]]@data$State)
head(walk)
hmm <- within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
})
walk$Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
head(walk)
walk$Town_ID <- ave(walk, Grid_ID, FUN = seq_along)
walk$Town_ID <- ave(Grid_ID, FUN = seq_along)
within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
hmm<-  within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
# sequentially number the towns...for better or for worse.
walk <-  within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
head(walk)
walk <-  within(walk, {
Town_ID <- ave(Grid_ID, FUN = seq_along)
})
head(walk)
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes[[1]]@data$Grid_ID[i]))
walk[i,3] <- shapes[[1]]@data$Town_ID[i]
walk[i,4] <- substr(shapes[[1]]@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
#walk2 <- walk[walk$Grid_Excel_ID != walk$Grid_ID,]
# sequentially number the towns...for better or for worse.
walk <-  within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
head(walk)
walk <-  within(walk, {
Town_ID <- ave(Grid_ID, FUN = seq_along)
})
head(walk)
class(Grid_ID)
class(walk$Grid_ID)
walk$Grid_ID <- as.factor(walk$Grid_ID)
walk <-  within(walk, {
Town_ID <- ave(Grid_ID, FUN = seq_along)
})
walk <-  within(walk, {
Town_ID <- ave(Grid_ID, Grid_ID, FUN = seq_along)
})
head(walk)
walk <-  within(walk, {
Town_ID <- ave(walk$Grid_ID,FUN = seq_along)
})
walk$Grid_ID <- as.character(droplevels(walk$Grid_ID))
walk <-  within(walk, {
Town_ID <- ave(walk$Grid_ID,FUN = seq_along)
})
head(walk)
walk <-  within(walk, {
Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
})
head(walk)
Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
Town_ID
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
head(walk)
Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
head(walk,20)
head(walk,200)
test <- merge(shapes[[1]]@data,walk,by=c('Grid_ID','Town_ID'),all.x=TRUE)
dim(shapes[[1]])
dim(test)
head(test)
head(test,30)
source('//lar-file-srv/Data/BTPD/dataBase/Programs/makeCrossWalk.R')
walk <- makeCrossWalk(shapes[[1]],allBAS)
makeCrossWalk <- function(shapes,allBAS){
test <- gIntersects(shapes,allBAS,byid=TRUE)
for(i in 1:ncol(test)){
if(sum(test[,i]) > 1){
test2 <- names(test[,i][test[,i] == TRUE])   # get names
test3 <- allBAS@data[rownames(allBAS@data) %in% test2,]
keeper <- rownames(test3[test3$BASRank == min(test3$BASRank),])
for(j in 1:length(test[,i])){
if(names(test[,i])[j] != keeper){
test[j,i] <- 0
}
}
print(paste0(i,' '))
}
}
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
test <- merge(shapes@data,walk,by=c('Grid_ID','Town_ID'),all.x=TRUE)
}
walk <- makeCrossWalk(shapes[[1]],allBAS)
dim(walk)
dim(shapes[[1]])
head(walk)
Xwalk <- walk
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
test <- merge(shapes@data,walk,by=c('Grid_ID','Town_ID'),all.x=TRUE)
test
test <- gIntersects(shapes,allBAS,byid=TRUE)
for(i in 1:ncol(test)){
if(sum(test[,i]) > 1){
test2 <- names(test[,i][test[,i] == TRUE])   # get names
test3 <- allBAS@data[rownames(allBAS@data) %in% test2,]
keeper <- rownames(test3[test3$BASRank == min(test3$BASRank),])
for(j in 1:length(test[,i])){
if(names(test[,i])[j] != keeper){
test[j,i] <- 0
}
}
print(paste0(i,' '))
}
}
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
final <- merge(shapes@data,walk,by=c('Grid_ID','Town_ID'),all.x=TRUE)
final
shapes <- shapes[[1]]
allBAS <- allBAS
test <- gIntersects(shapes,allBAS,byid=TRUE)
for(i in 1:ncol(test)){
if(sum(test[,i]) > 1){
test2 <- names(test[,i][test[,i] == TRUE])   # get names
test3 <- allBAS@data[rownames(allBAS@data) %in% test2,]
keeper <- rownames(test3[test3$BASRank == min(test3$BASRank),])
for(j in 1:length(test[,i])){
if(names(test[,i])[j] != keeper){
test[j,i] <- 0
}
}
print(paste0(i,' '))
}
}
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
final <- merge(shapes@data,walk,by=c('Grid_ID','Town_ID'),all.x=TRUE)
head(final)
head(walk)
walk[walk$Grid_ID == 'CO111870',]
walk[walk$Grid_Cent_ID == 'CO111870',]
walk[walk$Grid_Cent_ID == 'CO112212',]
walk[walk$Grid_ID == 'CO112212',]
shapes@data$Grid_Cent_ID <- shapes@data$Grid_ID
head(shapes@data)
final <- merge(shapes@data,walk,by=c('Grid_Cent_ID','Town_ID'),all.x=TRUE)
head(final)
shapes@data$Grid_Cent_ID <- NULL
names(shapes@data)[names(shapes@data) == 'Grid_ID'] <- 'Grid_Cent_ID'
head(shapes@data)
final <- merge(shapes@data,walk,by=c('Grid_Cent_ID','Town_ID'),all.x=TRUE)
head(final)
head(walk)
final <- merge(shapes@data,walk,by=c('Grid_Cent_ID','Town_ID'),all.y=TRUE)
head(final)
head(shapes@data)
dim(final)
dim(walk)
final[final$Grid_ID == 'CO112212',]
unique(final)
dim(unique(final))
length(is.na(final$State))
sum(is.na(final$State))
head(final)
sum(is.na(final$State.x))
sum(is.na(final$State.x) & final$State.x != 'WY')
table(final$State.x,exclude=NULL)
table(final[is.na(final$State.X),]$State.y,exclude=NULL)
table(final[is.na(final$State.X),]$State.y)
table(final[is.na(final$State.x),]$State.y)
head(walk)
shapes@data$pre_Town_ID <- shapes@data$Town_ID
final <- merge(shapes@data,walk,by=c('Grid_Cent_ID','pre_Town_ID'),all.y=TRUE)
dim(walk)
dim(final)
head(shapes@data)
tables(shapes@data$pre_Town_ID)
table(shapes@data$pre_Town_ID)
dim(shapes@data)
sum(duplicated(shapes@data))
dim(walk)
dim(final)
5907-5743
head(final)
final[final$Grid_Cent_ID == 'CO112212',
]
final[final$Grid_ID == 'CO112212',]
walk$pre_Town_ID <- walk$Town_ID #ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
names(shapes@data)[names(shapes@data) == 'Grid_ID'] <- 'Grid_Cent_ID'
shapes@data$pre_Town_ID <- shapes@data$Town_ID
final <- merge(shapes@data,walk,by=c('Grid_Cent_ID','pre_Town_ID'),all.y=TRUE)
dim(walk)
dim(final)
head(walk,30)
table(walk$pre_Town_ID
)
table(walk$pre_Town_ID)
class(walk$pre_Town_ID)
class(walk$Town_ID)
table(walk$Town_ID)
head(walk)
table(walk$State)
class(walk$State)
class(preTown_ID)
table(walk$pre_Town_ID)
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- walk$Town_ID #
head(test)
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
head(walk)
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
shapes <- shapes[[1]]
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(shapes@data$Grid_ID[i]))
walk[i,3] <- shapes@data$Town_ID[i]
walk[i,4] <- substr(shapes@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- walk$Town_ID #ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
class(shapes)
shapes <- shapes[[1]]
class(shapes)
shapes[[1]]
class(shapes[[2]])
length(shapes)
makeCrossWalk <- function(sf,allBAS){
#   sf <- shapes[[1]]
#   allBAS <- allBAS
test <- gIntersects(sf,allBAS,byid=TRUE)
for(i in 1:ncol(test)){
if(sum(test[,i]) > 1){
test2 <- names(test[,i][test[,i] == TRUE])   # get names
test3 <- allBAS@data[rownames(allBAS@data) %in% test2,]
keeper <- rownames(test3[test3$BASRank == min(test3$BASRank),])
for(j in 1:length(test[,i])){
if(names(test[,i])[j] != keeper){
test[j,i] <- 0
}
}
print(paste0(i,' '))
}
}
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(sf@data$Grid_ID[i]))
walk[i,3] <- sf@data$Town_ID[i]
walk[i,4] <- substr(sf@data$Grid_ID[i],1,2)
}
walk$pre_Town_ID <- walk$Town_ID #ifelse(!(walk$pre_Town_ID %in% seq(1,15,1)),99,walk$pre_Town_ID)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
names(sf@data)[names(sf@data) == 'Grid_ID'] <- 'Grid_Cent_ID'
sf@data$pre_Town_ID <- sf@data$Town_ID
final <- merge(sf@data,walk,by=c('Grid_Cent_ID','pre_Town_ID'),all.y=TRUE)
final
}
shapes <- cleanUpAllShps()
dim(shapes[[1]])
sf <- shapes[[1]]
allBAS <- allBAS
test <- gIntersects(sf,allBAS,byid=TRUE)
for(i in 1:ncol(test)){
if(sum(test[,i]) > 1){
test2 <- names(test[,i][test[,i] == TRUE])   # get names
test3 <- allBAS@data[rownames(allBAS@data) %in% test2,]
keeper <- rownames(test3[test3$BASRank == min(test3$BASRank),])
for(j in 1:length(test[,i])){
if(names(test[,i])[j] != keeper){
test[j,i] <- 0
}
}
print(paste0(i,' '))
}
}
data <- test
walk <- data.frame(matrix(NA,nrow=ncol(data),ncol=4))
names(walk) <- c('Grid_ID','Grid_Cent_ID','pre_Town_ID','State')
for(i in 1:ncol(data)){
if(sum(data[,i]) > 0){
walk[i,1] <- as.character(droplevels(allBAS@data[rownames(allBAS@data) == names(data[,i][data[,i] == 1]),]$Grid_ID))
} else {
walk[i,1] <- 'out'
}
walk[i,2] <- as.character(droplevels(sf@data$Grid_ID[i]))
walk[i,3] <- sf@data$Town_ID[i]
walk[i,4] <- substr(sf@data$Grid_ID[i],1,2)
}
head(walk)
walk <- walk[order(walk$Grid_ID,walk$pre_Town_ID),]
walk.out <- walk[walk$Grid_Excel_ID == 'out' & walk$State != 'WY',]   # find towns that shouldn't have been drawn!
walk$Town_ID <- ave(walk$Grid_ID,walk$Grid_ID,FUN = seq_along)
names(sf@data)[names(sf@data) == 'Grid_ID'] <- 'Grid_Cent_ID'
sf@data$pre_Town_ID <- sf@data$Town_ID
head(walk,30)
final <- merge(sf@data,walk,by=c('Grid_Cent_ID','pre_Town_ID'),all.y=TRUE)
dim(final)
dim(walk)
head(final,20)
table(final$State.y)
table(final$State.x,replace=NULL)
table(final$State.x,exclude=NULL)
final <- final[order(final$R_ID),]
head(final)
final <- final[order(as.numeric(final$R_ID)),]
head(final)
sum(duplicated(final$R_ID))
final[duplicated(final$R_ID),]
final[final$R_ID == '2450',]
walk[walk$Grid_Cent_ID == 'SD081674',]
shapes[[1]]@data[shapes[[1]]@data$Grid_ID == 'SD081674',]
final[final$Grid_Cent_ID == 'SD081674',]
final2 <- final[unique(final$Grid_Cent_ID,final$pre_Town_ID,final$AreaAc),]
dim(final)
dim(final2)
dim(sf)
final2 <- final[unique(final$Grid_Cent_ID,final$Grid_ID,final$pre_Town_ID,final$AreaAc),]
unique(final$Grid_Cent_ID,final$Grid_ID,final$pre_Town_ID,final$AreaAc)
final2 <- final[unique(final$Grid_Cent_ID,final$pre_Town_ID,final$AreaAc,final$Grid_ID),]
dim(final2)
dim(unique(final$Grid_Cent_ID,final$pre_Town_ID,final$AreaAc,final$Grid_ID))
unique(final$Grid_Cent_ID,final$pre_Town_ID,final$AreaAc,final$Grid_ID)
final$unique_ID <- paste0(final$Grid_Cent_ID,final$pre_Town_ID,round(final$AreaAc),3)
length(unique(final$unique_ID))
dim(sf)
final$unique_ID <- paste0(final$Grid_Cent_ID,final$pre_Town_ID,round(final$AreaAc),4)
length(unique(final$unique_ID))
final$unique_ID <- paste0(final$Grid_Cent_ID,final$pre_Town_ID,round(final$AreaAc),5)
length(unique(final$unique_ID))
final$unique_ID <- paste0(final$Grid_Cent_ID,final$pre_Town_ID,round(final$AreaAc,3))
length(unique(final$unique_ID))
final2 <- final[unique(final$unique_ID),]
dim(final2)
head(final2)
head(final$unique_ID)
sum(is.na(final$unique_ID))
head(final)
unique(final$unique_ID)
final2 <- final[!duplicated(final$unique_ID),]
dim(final2)
head(final2)
