png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$x,grouseShp@data$y,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
hmm <- spTransform(grouseShp, CRS(projLatLong))
projLatLong  <- "+init=epsg:4326"
hmm <- spTransform(grouseShp, CRS(projLatLong))
hmm@data
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
class(grouseShpLatLon)
slotNames(grouseShpLatLong)
slotNames(grouseShpLatLon)
grouseShpLatLong@proj4string
grouseShpLatLon@proj4string
grouseShp@proj4string
# read in the data and add in the centroids
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
grouseShpLatLon@data
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$x,grouseShp@data$y,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShpLatLon@bbox[1,1]
xmax <- grouseShpLatLon@bbox[1,2]
ymin <- grouseShpLatLon@bbox[2,1]
ymax <- grouseShpLatLon@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShpLatLon)
plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShpLatLon@data$x,grouseShpLatLon@data$y,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
writeOGR(grouseShpLatLon,paste0(grousePath,'/Results'),'grouseCentroidedLatLon',driver="ESRI Shapefile",overwrite_layer=TRUE)
head(grouseShpLatLon@data)
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLat'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLon'
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$x,grouseShp@data$y,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShpLatLon@bbox[1,1]
xmax <- grouseShpLatLon@bbox[1,2]
ymin <- grouseShpLatLon@bbox[2,1]
ymax <- grouseShpLatLon@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShpLatLon)
plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShpLatLon@data$x,grouseShpLatLon@data$y,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
writeOGR(grouseShpLatLon,paste0(grousePath,'/Results'),'grouseCentroidedLatLon',driver="ESRI Shapefile",overwrite_layer=TRUE)
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLat'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLon'
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$xProjected,grouseShp@data$yProjected,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShpLatLon@bbox[1,1]
xmax <- grouseShpLatLon@bbox[1,2]
ymin <- grouseShpLatLon@bbox[2,1]
ymax <- grouseShpLatLon@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShpLatLon)
plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShpLatLon@data$xLatLon,grouseShpLatLon@data$yLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
writeOGR(grouseShpLatLon,paste0(grousePath,'/Results'),'grouseCentroidedLatLon',driver="ESRI Shapefile",overwrite_layer=TRUE)
xmin
xmax
plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShpLatLon@data$xLatLon,grouseShpLatLon@data$yLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
head(grouseShpLatLong@data)
head(grouseShpLatLon@data)
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLatLon'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLatLon'
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$xProjected,grouseShp@data$yProjected,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShpLatLon@bbox[1,1]
xmax <- grouseShpLatLon@bbox[1,2]
ymin <- grouseShpLatLon@bbox[2,1]
ymax <- grouseShpLatLon@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShpLatLon@data$xLatLon,grouseShpLatLon@data$yLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
writeOGR(grouseShpLatLon,paste0(grousePath,'/Results'),'grouseCentroidedLatLon',driver="ESRI Shapefile",overwrite_layer=TRUE)
# write out the data alone
write.csv(grouseShp,paste0(grousePath,'/Results/grouseCentroided.csv')
write.csv(grouseShpLatLon,paste0(grousePath,'/Results/grouseCentroidedLatLon.csv')
# write out the data alone
write.csv(grouseShp,paste0(grousePath,'/Results/grouseCentroided.csv'))
write.csv(grouseShpLatLon,paste0(grousePath,'/Results/grouseCentroidedLatLon.csv'))
slotNames(grouseShpLatLon@proj4string)
slotNames(grouseShpLatLon)
grouseShpLatLon@proj4string
# read in the data and add in the centroids
# do it in the projected system
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
# do it in lat lon
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLatLon'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLatLon'
grouseShpLatLon <- spTransform(grouseShpLatLon, CRS("+init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
grouseShp <- grouseShpLatLon
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$xProjected,grouseShp@data$yProjected,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
# do it in the projected system
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
# do it in lat lon
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLatLon'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLatLon'
grouseShpLatLon <- spTransform(grouseShpLatLon, CRS("+init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
grouseShp <- grouseShpLatLon
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$xProjected,grouseShp@data$yProjected,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
# xmin <- grouseShpLatLon@bbox[1,1]
# xmax <- grouseShpLatLon@bbox[1,2]
# ymin <- grouseShpLatLon@bbox[2,1]
# ymax <- grouseShpLatLon@bbox[2,2]
#
# # output a simple plot
# png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
#   plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
#   points(grouseShpLatLon@data$xLatLon,grouseShpLatLon@data$yLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
# dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
# write out the data alone
write.csv(grouseShp,paste0(grousePath,'/Results/grouseCentroided.csv'))
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
xmin
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
# do it in the projected system
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@proj4string
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
# do it in the projected system
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
# do it in lat lon
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLatLon'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLatLon'
grouseShpLatLon <- spTransform(grouseShpLatLon, CRS("+proj=lcc +lat_1=45 +lat_2=49 +lat_0=44.25 +lon_0=-109.5 +x_0=600000 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
grouseShp <- grouseShpLatLon
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$xProjected,grouseShp@data$yProjected,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
# xmin <- grouseShpLatLon@bbox[1,1]
# xmax <- grouseShpLatLon@bbox[1,2]
# ymin <- grouseShpLatLon@bbox[2,1]
# ymax <- grouseShpLatLon@bbox[2,2]
#
# # output a simple plot
# png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
#   plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
#   points(grouseShpLatLon@data$xLatLon,grouseShpLatLon@data$yLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
# dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
# write out the data alone
write.csv(grouseShp,paste0(grousePath,'/Results/grouseCentroided.csv'))
require(rgdal)          # for reading and writing shapefiles
require(rgeos)          # for function gCentroid
# setup stuff
grousePath <- '\\\\LAR-FILE-SRV/Data/C. LeBeau/CentroidingGrouse'
grousePoly <- 'NHD_grouse_locs_fr_animal_soc'
projLatLong  <- "+init=epsg:4326"
# read in the data and add in the centroids
# do it in the projected system
grouseShp <- readOGR(paste0(grousePath,'/Data'),grousePoly);
grouseShp@data <- cbind(grouseShp@data,data.frame(gCentroid(grouseShp,byid=TRUE,id=NULL)@coords))
names(grouseShp)[names(grouseShp) == 'x'] <- 'xProjected'
names(grouseShp)[names(grouseShp) == 'y'] <- 'yProjected'
# do it in lat lon
grouseShpLatLon <- spTransform(grouseShp, CRS(projLatLong))
grouseShpLatLon@data <- cbind(grouseShpLatLon@data,data.frame(gCentroid(grouseShpLatLon,byid=TRUE,id=NULL)@coords))
names(grouseShpLatLon)[names(grouseShpLatLon) == 'x'] <- 'xLatLon'
names(grouseShpLatLon)[names(grouseShpLatLon) == 'y'] <- 'yLatLon'
grouseShpLatLon <- spTransform(grouseShpLatLon, CRS("+proj=lcc +lat_1=45 +lat_2=49 +lat_0=44.25 +lon_0=-109.5 +x_0=600000 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
grouseShp <- grouseShpLatLon
# OUTPUT POLY WITH CENTROIDS ON ORIGINAL PROJECTION
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
xmin <- grouseShp@bbox[1,1]
xmax <- grouseShp@bbox[1,2]
ymin <- grouseShp@bbox[2,1]
ymax <- grouseShp@bbox[2,2]
# output a simple plot
png(filename=paste0(grousePath,'/Results/GrouseCentroids.png',sep=""),width=9,height=6.5,units="in",res=300)
plot(grouseShp,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
points(grouseShp@data$xProjected,grouseShp@data$yProjected,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
dev.off()
# OUTPUT POLY WITH CENTROIDS IN LAT LON
# define x and y bounds so as to plot two things (original polygons and centroids) correctly
# xmin <- grouseShpLatLon@bbox[1,1]
# xmax <- grouseShpLatLon@bbox[1,2]
# ymin <- grouseShpLatLon@bbox[2,1]
# ymax <- grouseShpLatLon@bbox[2,2]
#
# # output a simple plot
# png(filename=paste0(grousePath,'/Results/GrouseCentroidsLatLon.png',sep=""),width=9,height=6.5,units="in",res=300)
#   plot(grouseShpLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax))
#   points(grouseShpLatLon@data$xLatLon,grouseShpLatLon@data$yLatLon,xlim=c(xmin,xmax),ylim=c(ymin,ymax),col='red',pch=19)
# dev.off()
# write out the updated shapefile in a new place
writeOGR(grouseShp,paste0(grousePath,'/Results'),'grouseCentroided',driver="ESRI Shapefile",overwrite_layer=TRUE)
# write out the data alone
write.csv(grouseShp,paste0(grousePath,'/Results/grouseCentroided.csv'))
library(RODBC)
testing <- TRUE           # points to different output folders.
platform <- '20150501'    # points to different platforms
if(testing == FALSE){
paste(cat('testing == FALSE\n'))
source("\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/CAMP_RST20150204/R-Interface/source_all.R")
} else {
paste(cat('testing == TRUE\n'))
setwd(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/CAMP_RST",platform,"/R-Interface/"))
source(paste0("\\\\LAR-FILE-SRV/Data/PSMFC_CampRST/ThePlatform/CAMP_RST",platform,"/R-Interface/source_all_testing.R"))
by <- 'week'
river <- 'Old American Test'
}
if(river == ''){
db.file <- db.file1
} else if(river == 'Sacramento River'){
db.file <- db.file2
} else if(river == 'American River'){
db.file <- db.file3
} else if(river == ''){
db.file <- db.file4
} else if(river == 'Feather River'){
db.file <- db.file5
} else if(river == 'Stanislaus River'){
db.file <- db.file6
} else if(river == 'Old American Test'){
db.file <- db.file7
}
if(river != 'Old American Test'){
site         <- theExcel[testi,]$siteID
siteText     <- theExcel[testi,]$Site
run          <- theExcel[testi,]$RunID
runText      <- theExcel[testi,]$SalmonRun
min.date     <- as.character(as.Date(theExcel[testi,]$minvisitTime,format = "%m/%d/%Y"))
max.date     <- as.character(as.Date(theExcel[testi,]$maxvisitTime,format = "%m/%d/%Y"))
} else {
river        <- 'american'
site         <- 57000
siteText     <- 'testing'
run          <- 3
runText      <- 'Fall'
min.date     <- "2013-10-01"
max.date     <- "2014-09-29"
#       min.date     <- "2012-10-01"
#       max.date     <- "2013-09-29"
}
taxon        <- 161980
if(testing == TRUE){
output.file  <- paste0("..//Outputs//",river,"//",river,"_",siteText,"_",min.date,"_",max.date)
} else {
output.file  <- paste0("..//Outputs//",river,"_",siteText,"_",min.date,"_",max.date)
}
ci           <- TRUE
output.type  <- "odt"
from         <- "Trent McDonald, Ph.D., WEST Incorporated"
to           <- "Doug Threloff, USFWS CAMP Coordinator"
return.addr  <- "FISH AND WILDLIFE SERVICE!USFWS Caswell State Park Office!1234 Abbey Rd.!Caswell, California  96080!(530) 527-3043, FAX (530) 529-0292"
#   ********
#   Check that times are less than 1 year apart
strt.dt <- as.POSIXct( min.date, format="%Y-%m-%d" )
end.dt <- as.POSIXct( max.date, format="%Y-%m-%d" )
run.season <- data.frame( start=strt.dt, end=end.dt )
dt.len <- difftime(end.dt, strt.dt, units="days")
if( dt.len > 366 )  stop("Cannot specify more than 365 days in F.passage. Check min.date and max.date.")
#   ---- Fetch efficiency data
release.df <- F.get.release.data( site, taxon, min.date, max.date  )
if( nrow(release.df) == 0 ){
stop( paste( "No efficiency trials between", min.date, "and", max.date, ". Check dates."))
}
#   ---- Fetch the catch and visit data
tmp.df   <- F.get.catch.data( site, taxon, min.date, max.date  )
catch.df <- tmp.df$catch   # All positive catches, all FinalRun and lifeStages, inflated for plus counts.  Zero catches (visits without catch) are NOT here.
visit.df <- tmp.df$visit   # the unique trap visits.  This will be used in a merge to get 0's later
#   ********
#   Check that times are less than 1 year apart
strt.dt <- as.POSIXct( min.date, format="%Y-%m-%d" )
end.dt <- as.POSIXct( max.date, format="%Y-%m-%d" )
run.season <- data.frame( start=strt.dt, end=end.dt )
dt.len <- difftime(end.dt, strt.dt, units="days")
if( dt.len > 366 )  stop("Cannot specify more than 365 days in F.passage. Check min.date and max.date.")
#   ---- Fetch efficiency data
release.df <- F.get.release.data( site, taxon, min.date, max.date  )
if( nrow(release.df) == 0 ){
stop( paste( "No efficiency trials between", min.date, "and", max.date, ". Check dates."))
}
#   *****
nvisits <- F.buildReportCriteria( site, min.date, max.date )
if( nvisits == 0 ){
warning("Your criteria returned no trapVisit table records.")
return()
}
#   *****
#   Open ODBC channel
db <- get( "db.file", env=.GlobalEnv )
ch <- odbcConnectAccess(db)
#   *****
#   This SQL file develops the hours fished and TempSamplingSummary table
F.run.sqlFile( ch, "QrySamplePeriod.sql", R.TAXON=taxon )
#   *****
#   This SQL generates times when the traps were not fishing
F.run.sqlFile( ch, "QryNotFishing.sql" )
#   *****
#   This SQL generates unmarked fish by run and life stage
F.run.sqlFile( ch, "QryUnmarkedByRunLifestage.sql", R.TAXON=taxon )
#   *****
#   Now, fetch the result
catch <- sqlFetch( ch, "TempSumUnmarkedByTrap_Run_Final" )
F.sql.error.check(catch)
close(ch)
#   ******************************************************************
#   Assign time zone (probably does not matter)
time.zone <- get( "time.zone", env=.GlobalEnv )
attr(catch$StartTime, "tzone") <- time.zone
attr(catch$EndTime, "tzone") <- time.zone
#   ********************************************************************
#   At this point, catch has all visits in it, even if no fish were caught.
#   It also has non-fishing intervals.  This is how you identify these intervals:
#       1. zero catch = catch$Unmarked == 0  ($FinalRun and $LifeStage are both "Unassigned" for these lines)
#       2. not fishing = catch$TrapStatus == "Not fishing"  (equivalently, $trapVisitID is missing for these lines.  Only time its missing.)
#
#   Pull apart the visits from the catch, because plus count expansion only applys to positive catches.
#   Recall, catch currently has multiple lines per trapVisit delineating fish with different fork lengths.
visit.ind <- !duplicated( catch$trapVisitID ) | (catch$TrapStatus == "Not fishing")
visits <- catch[visit.ind,!(names(catch) %in% c("Unmarked", "FinalRun", "lifeStage", "forkLength", "RandomSelection"))]
#   ********************************************************************
#   Subset the catches to just positives.  Toss the 0 catches and non-fishing visits.
catch <- catch[ (catch$Unmarked > 0) & (catch$TrapStatus == "Fishing"), ]
catch$Unassd <- catch$lifeStage # jason add to ID the unassigned lifeStage -- necessary to separate measured vs caught.
#   ********************************************************************
#   Expand the Plus counts
catch <- F.expand.plus.counts( catch )
#   Reassign factor levels because they may have changed.  I.e., we may have eliminated "Unassigned"
catch$FinalRun <- as.character( catch$FinalRun )
catch$lifeStage <- as.character( catch$lifeStage )
#catch$lifeStage <- as.character( catch$Unassd ) jason - possibly delete
df <- catch
